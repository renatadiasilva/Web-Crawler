
/* Controltag Loader for Turner */
(function(){
  var debugging = /kxdebug/.test(location);
  var log = function() {
    // It's a flag, so if it's there, then it means debug.
    debugging && window.console && console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = document.createElement('script');
    node.async = true;  // This is just to be friendly.
    node.src = url;

    // Connect to both in case we're in older IE.
    node.onload = node.onreadystatechange = function() {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  // Mark the callback, so we don't load it twice on accident.
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  // ControlTag simply crashes when opening a website from Twitter browser on
  // iOS, temporarily disable CT when Twitter for iPhone is detected until they
  // fix this (works fine with other twitter client though)
  if (/Twitter for iPhone/.test(window.navigator.userAgent || '')) return;

  var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "<script>\r\n(function(){\r\n  if (window.Krux) {\r\n    var kuid = window.Krux('get', 'user');\r\n    if (kuid && typeof kuid != 'undefined') {\r\n       var rubicon_url = '//tap.rubiconproject.com/oz/feeds/krux/tokens?afu=' + kuid;\r\n       var i = new Image();\r\n       i.src = rubicon_url;\r\n    }\r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": false, "content_type": "html", "freq_cap": 3, "timing": "asap", "method": "document", "type": "publisher", "id": 28180, "name": "Rubicon User Matching"}, {"content": "<script src=\"//i.cdn.turner.com/ads/adfuel/crt_helper.js\"\r\ntype=\"text/javascript\"></script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 0, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "criteria": [{"operator": "contains", "name": "url", "value": "entertainment/what-is-star-wars-day-feat/index.html?mitch"}], "timing": "asap", "method": "document", "type": "publisher", "id": 52898, "name": "Criteo (Test) to Star Wars"}, {"content": "<script type=\"text/javascript\">\r\n(function(require) {\r\n    var config = require('config')();\r\n    var store = require('store');\r\n    var _ = require('util');\r\n    var segments;\r\n\r\n    function handleUserDataResponse(r) {\r\n        // Handle the response as usual.\r\n        segments.handleUserDataResponse(r);\r\n\r\n        // Override localStorage.kxuser with a case-insensitive value for DFP premium.\r\n        // This will get read by the interchange direct snippet for Krux.user\r\n        // and Krux.dfpKeyValues\r\n        if(r.kuid_long) {\r\n            store.set('user', r.kuid_long, store.DAYS*30);\r\n        }\r\n    }\r\n\r\n    function useFirstPartyCookie() {\r\n        // Older versions of CT don't have feature.\r\n        try {\r\n            var feature = Krux('require:feature');\r\n            // If they don't have 3rd party cookies, then we rely on 1st party.\r\n            return !feature.hasThirdPartyCookies();\r\n        } catch (e){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Our own fetch uses our own handleResponse\r\n    function fetch() {\r\n        var data = {pub: _.get('pubid')};\r\n\r\n        // Skip \r\n        if (useFirstPartyCookie() && Krux('get', 'user')) {\r\n            data._kuid = Krux('get', 'user');\r\n        }\r\n        var options = {\r\n            url: _.get('url_userdata'),\r\n            data: data,\r\n            callback: 'kxjsonp_userdata',\r\n            done: handleUserDataResponse\r\n        };\r\n\r\n        // SEE: SCRUM-1129\r\n        var orgUserId = _.get('org_user_id');\r\n        if(orgUserId) {\r\n            options.data._kuid = orgUserId;\r\n        }\r\n\r\n        var fpId, fp;\r\n        var useFingerprint = config.get('params.fingerprint', false);\r\n        if (useFingerprint) {\r\n            fpId = _.get('fp_id');\r\n            options.data.kxfp = fp = _.get('fp');\r\n            // Ensure we don't send the fingerprint as the id (it mascarades in fallback mode)\r\n            if (fpId && fpId.length !== fp.length) {\r\n                options.data.kfuid = fpId;\r\n            }\r\n        }\r\n\r\n        if(!segments.readTechFromStore()) {\r\n            options.data.technographics = 1;\r\n        }\r\n        require('http').jsonp(options);\r\n    }\r\n\r\n    if (!useFirstPartyCookie()) {\r\n        Krux('set', 'user', Krux('require:store').get('kuid'));\r\n    }\r\n\r\n    if(!store.get('segWait')) {\r\n        // disable segments.fetch and use our own\r\n        _.set('segWait', 1, store.MINUTES*5);\r\n        _.onOnce('dom:load', fetch);\r\n        _.fire('user_data_fetch_scheduled');\r\n    }\r\n\r\n    // Finally, require segments as usual.\r\n    segments = require('segments');\r\n}(Krux.require));\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 2, "internal": 1, "content_type": "html", "timing": "asap", "method": "document", "type": "publisher", "id": 48801, "name": "Load Segments V4 (auto upgrade)"}, {"content": "<script src=\"//i.cdn.turner.com/ads/adfuel/admb_helper.js\"\r\ntype=\"text/javascript\"></script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 0, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 2, "internal": false, "content_type": "html", "criteria": [{"operator": "contains", "name": "url", "value": "http://www.dev.staging.nba.com/.devel/chaynes/cvp/amazon/"}], "timing": "asap", "method": "document", "type": "publisher", "id": 52180, "name": "Amazon Tag NBA Helper JS (Test)"}, {"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "internal": 1, "template_replacement": 1, "execution_results": null, "tier": 1, "library_tag_config": {}, "content_type": "html", "timing": "onload", "method": "document", "type": "library", "id": 28016, "name": "Krux Track Social"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 97, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 58302, "name": "Turner Epsilon (via LIveRamp) provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 88, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 59096, "name": "Dun & Bradstreet provider tag"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 6, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 20466, "name": "Technographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 14, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 20467, "name": "Krux Geographic Data provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid && typeof kuid != 'undefined') {\r\n      var prefix = location.protocol == 'https:' ? \"https:\" :\"http:\";\r\n      var r_url = prefix + '//cm.g.doubleclick.net/pixel'\r\n      var kurl = prefix + '//apiservices.krxd.net/um?partner=google&r=' + r_url;\r\n      var i = new Image();\r\n      i.src = kurl;\r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": false, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "publisher", "id": 30470, "name": "Google User Matching"}, {"content": "<script>\r\n(function(){\r\n// To Pull GUID \r\nKrux('scrape', { 'user_attr_turner_guid': {cookie: 'ug'}});\r\n\r\n// To Pull Adobe Analytics ID\r\nKrux('scrape', { 's_vi': {cookie: 's_vi'}});\r\nvar s_vi = Krux('get', 's_vi') || '';\r\ns_vi = s_vi.replace('[CS]v1|','');\r\ns_vi = s_vi.replace('[CE]','');\r\nKrux('set','user_attr_aa_id', s_vi);\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 45332, "name": "5. Data Transfer Code (IDs)"}, {"content": "<script>\r\n// Using Globals currentVideoObj.franchiseName to produce page attribute currentVideoObj.franchiseName\r\nKrux('scrape', { \"page_attr_currentVideoObj.franchiseName\": {js_global: \"currentVideoObj.franchiseName\"}});\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 28449, "name": "3. Data Transfer Code (VideoObj)"}, {"content": "<script>\r\n    var kxslot, kxpos;\r\n    (function() {\r\n        if (window.googletag && googletag.pubads() && googletag.pubads().getSlots()) {\r\n            var counter = {};\r\n            var arr = googletag.pubads().getSlots();\r\n\r\n            if (arr) {\r\n                for (var i = 0, l = arr.length; i < l; i++) {\r\n                    counter[arr[i].getAdUnitPath()] = (counter[arr[i].getAdUnitPath()] || 0) + 1;\r\n                }\r\n                kxslot = Object.keys(counter)[0] || null;\r\n                for (k in counter)\r\n                    kxslot = (counter[k] > counter[kxslot]) ? k : kxslot;\r\n            }\r\n            if (window.kxslot) {\r\n                // Set string lowercase and split kxslot into an array\r\n                kxslot = kxslot.toLowerCase();\r\n                kxslot = kxslot.split('/');\r\n\r\n                // Changes kxslot from \"as\" to \"toonswim\" \r\n                kxslot[2] = kxslot[2] == 'as' ? 'toonswim' : kxslot[2];\r\n                // Changes kxslot from \"arabic\" to \"cnn_arabic\" \t\t\t\r\n                kxslot[2] = kxslot[2] == 'arabic' ? 'cnn_arabic' : kxslot[2];\r\n                // Changes kxslot from \"cnni\" to \"cnn_internation\" \r\n                kxslot[2] = kxslot[2] == 'cnni' ? 'cnn_international' : kxslot[2];\r\n                // Changes kxslot from \"cnnmoney\" to \"cnn_money\" \t\t\r\n                kxslot[2] = kxslot[2] == 'cnnmoney' ? 'cnn_money' : kxslot[2];\r\n\r\n                // Using domain to dynamically scrape page attribute site\r\n                Krux('set', 'page_attr_' + kxslot[2] + '_site', kxslot[2]);\r\n\r\n                // Using domain to dynamically scrape page attribute rollup\r\n                Krux('set', 'page_attr_' + kxslot[2] + '_rollup', kxslot[3]);\r\n\r\n                // Using domain to dynamically scrape page attribute section\r\n                Krux('set', 'page_attr_' + kxslot[2] + '_section', kxslot[4]);\r\n\r\n                // Using domain to dynamically scrape page attribute subsection\r\n                Krux('set', 'page_attr_' + kxslot[2] + '_subsection', kxslot[5]);\r\n\r\n                if (kxslot[2] !== \"br\") {\r\n                    // Using domain to dynamically scrape page attribute pos\r\n                    kxpos = AMPTManager.existingDivs;\r\n                    Krux('set', 'page_attr_' + kxslot[2] + '_pos', kxpos);\r\n                }\r\n            }\r\n        }\r\n    })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 36134, "name": "1. Data Transfer Code (DFP)"}, {"content": "<script> Krux('admEvent','JbUTTHft', {}); </script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "criteria": [{"operator": "=", "name": "url", "value": "http://edition.cnn.com/SPECIALS/human-to-hero/"}], "timing": "onload", "method": "document", "type": "publisher", "id": 38186, "name": "CNN Human to Hero"}, {"content": "<script>\r\n(function() {\r\n\r\n    // Using Meta keywords to produce page attribute keywords\r\n    Krux('scrape', { \"page_attr_keywords\": {meta_name: \"keywords\"}});\r\n    // Using Cookie last5stocks to produce page attribute cookie_last5stocks\r\n    Krux('scrape', { \"page_attr_cookie_last5stocks\": {cookie: \"last5stocks\"}});\r\n\r\n    if (document.location.host.match(\"bleacherreport\")) {\r\n        // Using Meta keywords to produce page attribute keywords\r\n        Krux('scrape', {\"page_attr_bleacherreport_keywords\": {meta_name: \"keywords\"}});\r\n        Krux('scrape', {\"page_attr_bleacherreport_site\": {javascript: \"document.location.host.split('.')[0]\"}});\r\n    }\r\n\r\n    if(window.kxslot) {\r\n        // get namespace;\r\n        var ns = (function() {\r\n                        var exceptions, jsmdmap, key1, key2, val1, val2, _ref;\r\n                        if (window._jsmd_default) {\r\n                            jsmdmap = _jsmd_default.map;\r\n                            for (key1 in jsmdmap) {\r\n                                val1 = jsmdmap[key1];\r\n                                for (key2 in val1) {\r\n                                    val2 = val1[key2];\r\n                                    if (ns = val2 != null ? (_ref = val2.settings) != null ? _ref.visitorNamespace : void 0 : void 0) {\r\n                                        return ns;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        exceptions = {\r\n                            'NBA': '0_nbagroup',\r\n                            'Nascar': 'nascardigitalsap',\r\n                            'Bleacher Report': 'turnersidigital',\r\n                            'Teamcoco': '0_teamcoco'\r\n                        };\r\n                        return exceptions[Krux('get', 'site')];\r\n                })();\r\n\r\n        if(!ns) return;\r\n        //get site\r\n        var site = kxslot[2];\r\n        // get pixel\r\n        var pixel = window[\"s_i_\" + ns] || window[\"s_i_1_\" + ns] || window[\"s_i_0_\" + ns];\r\n        // regex for pixel source\r\n        var lookFor = \"&h1=(.*?)&\";\r\n        // check if pixel source matches the regex\r\n        var match =  (pixel && pixel.src) ? pixel.src.match(lookFor) : null;\r\n\r\n        if (match) {\r\n            var parts = decodeURIComponent(match[1]).split('|');\r\n            var keys = ['lob', 'brand', 'bizunit', 'sitename', 'sitesectionlevel1', 'sitesectionlevel2'];\r\n            for (var i = 0, l = keys.length;i < l; i++) {\r\n                var key = keys[i];\r\n                if(parts[i]) Krux('set', \"page_attr_\" + site + \"_\" + key, parts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 2, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 44248, "name": "2. Data Transfer Code (Omniture)"}], "segments": [], "publisher": {"uuid": "e9eaedd3-c1da-4334-82f0-d7e3ff883c87", "id": 11621, "name": "Turner"}, "controltag_options": {"async": "true", "render": true}, "site": {"id": 13688, "name": "CNN International Edition"}, "prioritized_segments": ["pn8m0ct5i", "pn8mcpym0", "pngt3496c", "pngrmot62", "plxfqu68w", "plxh0cej7", "pll87krs7", "plo8kazgq", "pll5epyn8", "plijlqzot", "pk5oigzbs", "pk1bd6hwg", "pfbb3mfr7", "pkynbunky", "pkygn4xhp", "pkydx854n", "pkyc5lydy", "pkep3ogtl", "pjixwow8t", "pjiw5122r", "pii2f5l0z", "pii13i3l2", "pii0pihbl", "piizpeqig", "piizwx9zx", "piizuvyyk", "piizscvl4", "piiznovo9", "piizll75p", "pges4zyos", "pgesmkn7d", "ngkaet52v", "pga0y7wqw", "pgaxvoua9", "pf3xumbg5", "pfr5ihgpu", "pfr5acpsv", "pfq34lcum", "pfq2thqf9", "pfa6ix6o2", "pffgfrfc9", "pfbb2af3o", "pewgeu61m", "pev9lsyzg", "pev1hjwmp", "pevzkbwx2", "perd0k6vf", "perdxbxvx", "pd0qxm9h5", "pd0q0drhn", "pdvl1d6kn", "pdvlm5wcf", "pdb1abgyw", "pdb10rxnt", "o85sm0szd", "o5du0invq", "onwuk1j3p", "oqvo8j78z", "n5wqmenoa", "op7zb9wst", "o23p36wlj", "oz5bke2e7", "op7qu134u", "ow02vxoxn", "ol8yeu190", "oz8m5cfyg", "ojpzrxlxg", "o2zs76nt2", "oihw95wki", "omcyl176a", "n5c46smdr", "n4pf1bml8", "n5c09rzgz", "ow4wwcby5", "oxs03zajh", "n5dedrl9e", "n7g8xd3gn", "o2inaxkhd", "o2fd4g1pt", "o2fdy8egn", "n5dcxk9zb", "o1jvfgmc1", "oo349otu8", "n5c244zga", "oo69w0dc2", "n5ddb1bpr", "oy7qw91dr", "oy7qt9hxr", "oy7nbnw4j", "oy34zcvr5", "oydrlwfzj", "owtk68gke", "ovqm6jls6", "ouqgr7oij", "oxkbqlt7w", "oofjeme8d", "oxkcjzrc8", "oxkhq21md", "oxkkizowq", "oor80jpam", "n5wn1ui77", "n5w0979by", "onrvw56e6", "ojpy27x0p", "onrvrj151", "ohlith9bw", "n6wmil4a3", "ow0u8jsko", "ol8huco5c", "ow4vr99p4", "ojwwecir2", "oor00a4oq", "ok9lbcpn0", "ojdcwdj3g", "opfsqxmay", "orqod1wl4", "obi1ao2ri", "noaold8o2", "omcmpk6l4", "nodwjned9", "ol8iinpau", "oj4y3xm7o", "n4817demz", "n5c8q8fb1", "n4805apw4", "ol8hjgv59", "n5c3w4duk", "n5dan1tu8", "n5c66y79u", "n5wsey11k", "obzgikk57", "n5c7t6dg4", "n5xfud34k", "n5c8gwwbs", "oebdg789j", "okgplh5nx", "nu4l9ovvc", "n6lamk0rg", "ojs08vn88", "n58oam1zv", "onz8ml55o", "nzu2b1bfi", "n5xd2axks", "ojdltp8ul", "ooogej5l0", "ndgr2etcz", "obmv7hptl", "omck0gx0c", "nzywhgceh", "n58q590u8", "n0c7ap7lr", "ohtonitcp", "ohtoh2tr9", "opgalic5g", "nwsjaji63", "oumosjvfg", "oumuc886y", "oumuaorqi", "oumt5myjt", "oumty4ao5", "oumtvhell", "opvhgnrtm", "n49ko408n", "n5c5fca4g", "opz04nnaj", "owxwwefli", "oqy1un0dw", "n5cyf9l75", "olh3w1che", "olh3iw8lt", "oo3rbptjj", "op366l1kv", "olh2v6yvi", "oo3hu0arq", "olimj2zxi", "olh4wqb5p", "oxsyy463v", "oxs0vfa32", "oxs3r451h", "oxs36l7uz", "oxs4dbge1", "oxs4nxpti", "oxv4lul2h", "oxv4rmmx0", "oxv4tyldq", "oxv4wr11x", "oridvh5jd", "ox1lo70kn", "of13oevco", "oqvol9nts", "n5cxgub05", "ozbsbyrm3", "ozbsgud8g", "ozbtq0kta", "ozbtt5x3m", "ozbuwal10", "ozbwa3w46", "ozb5wiqsf", "ozcdquubf", "ozcd4hm46", "ozcg3msr9", "ozcyxtz1t", "ozfzyehpw", "ozfz738kn", "ozgifrvkv", "ozgjnrlvj", "ozgjpv2i8", "ozgkh6owo", "ozgnxrje2", "ozgp1nt1y", "ozguqsks6", "ozguz067q", "ozz840qnx", "oz0igv79x", "oz0ik2bm6", "oz0jnchnx", "oz0jruvyr", "oz0k7jpxd", "oz4o0ey85", "oz4o45elw", "oz4o8h8mf", "oz4pewtn4", "os2095t87", "oz8g03xkf", "oz82slv9i", "oz822mqnk", "oz836nquc", "oz84h9xsh", "oz87pcf5v", "o0o7zgeiv", "o0o8bl6xt", "o0o8gctw6", "o0o8pij58", "o0o82372p", "o0o89e60w", "o0o9hw7mx", "o0o9q5iy6", "o0o9ue97d", "o0o9xkrqt", "o0o91v0ye", "o0o94s955", "o0o98llbg", "o0pabuft1", "o0pahuutd", "o0pakxp0d", "o0pao1u5n", "o0pat9m92", "o0paw91v4", "o0pa0f8xg", "o0pa4bb5b", "o0pa7f5pp", "o0pbakgom", "o0pbc7drh", "o0pbfzi1l", "o0pbievdx", "o0pbkue8w", "o0pbrhbxe", "o0pbt110f", "o0pbxjfan", "o0pb4smw7", "o0r5wsyef", "o0r6ane6a", "o0r8pae7g", "o0r8fli4d", "o0sa4hufz", "ozdf5vvox", "o0v69l7hu", "o0v7utzxo", "o0v768p7z", "o0zzd87wk", "o0z1uzp0g", "o00u2jpsc", "o1gj5l80s", "oygxnee7j", "o1kqe24c2", "o1m94ad6a", "o1si984cw", "o2feiauhb", "o2fev2mvu", "o2fkok9cs", "osa589jkw", "o23sfuct7", "o24hoxx06", "o26g5dgko", "o26g9l6n9", "o3b0blopm", "o3b0epo45", "o3q3era29", "o3sg2wjj7", "oypp33wcp", "o3zcige25", "o30fzobfs", "o4q5ntjxv", "o4rccvnk1", "o4r5oe1fb", "o3yj1w7gv", "ozbva47al", "o2ferxzzx", "ozgu2hs07", "ozb6d0bcn", "ozgima1zp", "o2fjub5hf", "o3ypflabr", "ozwiknp64", "ozci2encp", "o2fevsz6h", "o1j2spsop", "oxs4szrpj", "oxkjze4mo", "ozkt3b9rk", "oxkkwius6", "ozgnz4hgt", "ozktztglt", "ozgkx0vjv", "o3covw898", "o4r5z6wou", "n5devf5ak", "o30gifrcg", "o3zitnii7", "o3q3gz4l1", "o30gcvyf5", "o4r545zoy", "oyhruwwz1", "oi5y5rdb9", "o4r5rx09v", "oxstascbt", "o4u75w9p9", "o5bh18lve", "o4u8kossr", "o5b2fcpmy", "o5fisrv2i", "o520fplrd", "o4sfw4n7a", "o6t8f18fp", "os21hkal4", "o6vjptjdz", "oylq76qdf", "o6yidqkh0", "o6ynuiwbe", "o6yp2r8ud", "o6yq5ev8k", "o6yqnhd15", "o6ysnjeki", "o6ytkz9av", "o6yuj4nvb", "o6yu8lfwj", "o6ywbbhls", "n5c1lsq81", "o6zcrf4a2", "o6zc0wfvj", "o6zdnl69s", "o6zfj5jzd", "ott8cq7pu", "omw2nadpo", "ou964i4gw", "o63fx1j60", "o63l5texx", "oxxn0o8xc", "o17w1i1df", "o17y8e79a", "o17zrvebs", "o17x37674", "o17t3gvad", "o4rpnv6vi", "o7bebwf19", "ormhd0cvz", "o52034kyj", "o5e33vicy", "o6yw7b4jr", "n4pf08k4e", "n4pf1c04j", "n4pf07bie", "n4pf09ahc", "n4pf1acde", "n4pf08b31", "n4pf1agcn", "n4pf1bwkv", "n4pf09eqt", "onj6ewfab", "n4pf07fz3", "n4pf07k15", "n4pf0910u", "n4pf1cofy", "n4pf1cfsk", "n4pf1aoqp", "n4pf094x0", "n4pf08p9p", "n4pf1aec4", "n4pf07qvn", "n4pf1cjtd", "n4pf1b5hy", "n4pf09g0d", "n4pf07itk", "n4pf09x9d", "n4pf1b1sn", "n4pf0753i", "n4pf1a5c4", "n4pf1ddua", "n4pf08jmr", "o7ucijzzj", "n4pf063y8", "n5xefdrqa", "n5xeni7ph", "n5wvr8rnj", "o7ufy97hu", "o7uxtnz5j", "o6yqufefs", "onj6lmmqv", "o7x3ptkda", "oqrm9b0rb", "o8mm4cn44", "o8pxv6r18", "o8qjsb6lo", "o8qx1kjtd", "o8u1bwspk", "o9bgjuqbm", "o9bg2jgvz", "o9bhogi6x", "o9bh0zgq0", "okgtlk4wk", "o9dz9zkg8", "o0cwsb5vx", "o9mpe6z8b", "o9xe4cuby", "o9xe6gdq2", "o9xe8oa0c", "o9xfa0z05", "o9xftshsk", "o9xfvs6wu", "o9xfydenv", "o9xf1d45w", "o9xf3r1i6", "o9xf5k1so", "o9xf7nm7b", "o9xf9xce3", "o9xgb4fzl", "o9xlkc63c", "o99ga1294", "oo4cbq8gu", "paui1yoic", "paui6tiqz", "pa2dcopu3", "pcc4ju18y", "o92xcjp2y", "o86taxj1g", "n4pf1bhgm", "pclyd6abi", "pclyustk2", "pcl0clnow", "pcl29u3yt", "pcl4p4tu6", "pcl4166ok", "pc9e380zd", "pcp0xn0lb", "pdwr0b1yd", "oyc02ep9x", "pd8w1bm12", "pd8w3zvff", "pcgu190uc", "pej6iwle8", "pelcx6d8a", "peoox2stq", "peo6ezreh", "peo90lpgd", "pd8rmrius", "peta7aozk", "pevzo8mxe", "pevzq9g7b", "pevz83fc7", "pewgnaizk", "pewgu3tcj", "pewgz2rbx", "pewhh5yvg", "pewx0jn4g", "pewzf0x62", "n4pf1dmxv", "pfa6toqtp", "pfa8m09g7", "pfbct69kt", "pfbcv2hub", "pfbzazj5b", "pfczmll8s", "pfcz2eq0z", "pfc0jm8m5", "pfgsjhh2n", "pfgvxp6th", "pb9p766nl", "pb9qluxeg", "pfgz0ugkd", "pfg0cegbr", "o96jkmw96", "o96jl73iw", "pfgzw3k0l", "pfki8grte", "pfkjqzr39", "pfowdv4du", "nzy0ukt3d", "oxsmw8nl9", "n5dcogv0z", "owyaje82o", "oxsmsm5au", "ou95c3h8o", "oz4zq419k", "n88l9omu0", "oxslu7sal", "obi4gkmv1", "n5cyn8fam", "oyhqvi846", "oyhq2m1no", "oyhqplcel", "oyhr8uix9", "olgukwz16", "olcjv8sm5", "pdcvswqkf", "pf7lklgl3", "pf8c5dxhb", "pf8jq1fzn", "pf8ko0pm2", "pf8zzb2om", "pg4c3bu2i", "pg4daae1d", "pg7rbvbsw", "n5c5k13lw", "n5c000azf", "phbiwspfc", "phb2nm0rs", "phcd338ix", "ottyictfk", "oqu0a44wq", "phnuvpn8j", "oxxmf7z9e", "ph3yepkrr", "n5c1xhnk6", "pijrwwei3", "pfow94bni", "pir8rkpcf", "pi7q69kb1", "pi7raq2hd", "pi7wy5vrw", "pi7xfvjs3", "o9dmq9fbr", "pjasyy33f", "pjfb2ur5s", "pjbbbl86r", "n4pf08zvi", "pifycuhin", "pjj1xwf6k", "pjziinzr7", "pjziu8yt4", "n5c4wnqeq", "pkbdq1jvm", "pkbfrcj3z", "pkqfd8euq", "pkqzeyjsa", "pkraar5rg", "pkvn85o9o", "oridp1ihz", "pk1891qqr", "pk2c2dv1f", "pk3lx07zx", "pk3ma5flq", "pk5pc7nmr", "plh7qcjq9", "n49evu1k9", "plnirhmca", "plpczde60", "plpx1tvq2", "plp60xqtt", "plng9avzx", "pdgo6cgan", "plxgy1w3p", "plxg1r6lw", "plw69yy8r", "owxi1uqpx", "pml6vt1xq", "pluszaxva", "pm5xsz4xb", "pm6yp9snd", "pm6y1wzoh", "pm6zfk81b", "n5dbr4ngr", "n5wvwfpvp", "n4pf1db4t", "n4pf0733k", "n49h2ss6u", "pcp0mh2wj", "pnakhn89i", "pnakk4bgx", "pnesxoqkb", "pntzd2et8", "pnud5gjpk", "pnud892ql", "pn97jdud7", "pn98ynw28"], "dnt": null, "params": {"connector_host": "connector.krxd.net", "control_tag_load_sync": "false", "fingerprint": false, "disable_http_compression": false, "remove_kxhead": true, "supertag_requires_approval": false, "config_source": 1, "control_tag_stats_prefix": null, "beacon_host": "beacon.krxd.net", "max_segments": "20", "control_tag_pixel_throttle": "100", "user_id_cookie": null, "first_party_uid": false, "no_pii": 0, "recommend": false, "revenue_optimization": false, "context_terms": "false", "jslog_host": "jslog.krxd.net", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "userData_host": "cdn.krxd.net", "control_tag_namespace": null, "control_tag_version": "stable", "capture_js_errors": "true", "datatag_version": "3", "dfp_premium": "true", "userdata_host": "cdn.krxd.net", "target_fingerprint": false}, "services": {"impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "userdata": "//cdn.krxd.net/userdata/get", "userData": "//cdn.krxd.net/user_data/segments/3", "um": "//apiservices.krxd.net/um", "optout": "//beacon.krxd.net/optout_check", "pixel": "//beacon.krxd.net/pixel.gif", "contentConnector": "//connector.krxd.net/content_connector/", "is_optout": "//beacon.krxd.net/optout_check", "set_optin": "//apiservices.krxd.net/consumer/optin", "social": "//beacon.krxd.net/social.gif", "set_optout": "//apiservices.krxd.net/consumer/optout", "data": "//beacon.krxd.net/data.gif", "event": "//beacon.krxd.net/event.gif", "log": "//jslog.krxd.net/jslog.gif"}, "geo": {}, "realtime_segments": [{"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_cnn_site", "[\"cnn\"]"]], ["and", ["intersects", "$page_attr_cnn_rollup", "[\"health\"]"], ["intersects", "$page_attr_cnn_section", "[\"expert_qa\"]"]]]]], "id": "n0c7ap7lr"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_cnn_sitesectionlevel1", "[\"awards season\"]"]]]]], "id": "ohtoh2tr9"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_cnn_sitesectionlevel1", "[\"awards season\"]"]]]]], "id": "ohtonitcp"}, {"test": ["and", ["or", ["and", ["or", "$event_JyQZ7xSM"]]]], "id": "plnirhmca"}, {"test": ["and", ["or", ["and", ["or", "$event_JyQZ7xSM"]]]], "id": "pnesxoqkb"}], "confid": "ITb_9Zup"};

  // Wrap in a function and comment, then toString the func and replace
  // everything that's not the beginning or end of a JSON object, so we get a
  // string that's either empty or JSON.
  var esiGeo = String(function(){/*
    <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = window.JSON.parse(esiGeo);
    } catch (__) {
      // Couldn't parse, so setting to {}
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }

  
  
  

  load('//cdn.krxd.net/ctjs/controltag.js.875fd5b280a77e06def8c74a5a268e2c', function() {
    
    
    log('Loading krux configuration.');

    Krux('config', config);

    
  });
})();
